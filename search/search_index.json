{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About mummify makes model prototyping faster. The package automagically takes care of git and logging for your machine learning project so that you can focus on what's important. Functions mummify is one function and two command line tools: log - to automatically log and commit model changes mummify history - to view those changes mummify switch - to go back to a different version of your model Usage mummify is simple to use. Just add import mummify at the top and mummify.log(<string>) at the bottom of your model: import mummify from sklearn.datasets import load_wine from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier data = load_wine () y = data . target X = data . data X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) model = KNeighborsClassifier () model . fit ( X_train , y_train ) accuracy = model . score ( X_test , y_test ) mummify . log ( f 'Test accuracy: {accuracy:.3f}' ) When you run your model ( python model.py ) for the first time mummify will create a protected .mummify git folder and will start to log messages to a mummify.log file. When you make changes and run everything again: ... model = LogisticRegression () model . fit ( X_train , y_train ) accuracy = model . score ( X_test , y_test ) mummify . log ( f 'Test accuracy: {accuracy:.3f}' ) mummify will update the mummify.log file and save a snapshot of your working directory. To view the history of your model, just run mummify history from the command line: max$ mummify history * HEAD mummify-3d15c7c2 * mummify-2d234a8a * mummify-1fad5388 * mummify-root And to go back to a previous snapshot of your model just grab the mummify id from the mummify.log file and run mummify switch <id> from the command line: max$ mummify switch mummify-2d234a8a mummify will preserve all state history during and after a switch and keep the mummify.log file intact. Installation pip install mummify Contribute For feature requests or bug reports, please use Github Issues","title":"Home"},{"location":"#about","text":"mummify makes model prototyping faster. The package automagically takes care of git and logging for your machine learning project so that you can focus on what's important.","title":"About"},{"location":"#functions","text":"mummify is one function and two command line tools: log - to automatically log and commit model changes mummify history - to view those changes mummify switch - to go back to a different version of your model","title":"Functions"},{"location":"#usage","text":"mummify is simple to use. Just add import mummify at the top and mummify.log(<string>) at the bottom of your model: import mummify from sklearn.datasets import load_wine from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier data = load_wine () y = data . target X = data . data X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.2 , random_state = 42 ) model = KNeighborsClassifier () model . fit ( X_train , y_train ) accuracy = model . score ( X_test , y_test ) mummify . log ( f 'Test accuracy: {accuracy:.3f}' ) When you run your model ( python model.py ) for the first time mummify will create a protected .mummify git folder and will start to log messages to a mummify.log file. When you make changes and run everything again: ... model = LogisticRegression () model . fit ( X_train , y_train ) accuracy = model . score ( X_test , y_test ) mummify . log ( f 'Test accuracy: {accuracy:.3f}' ) mummify will update the mummify.log file and save a snapshot of your working directory. To view the history of your model, just run mummify history from the command line: max$ mummify history * HEAD mummify-3d15c7c2 * mummify-2d234a8a * mummify-1fad5388 * mummify-root And to go back to a previous snapshot of your model just grab the mummify id from the mummify.log file and run mummify switch <id> from the command line: max$ mummify switch mummify-2d234a8a mummify will preserve all state history during and after a switch and keep the mummify.log file intact.","title":"Usage"},{"location":"#installation","text":"pip install mummify","title":"Installation"},{"location":"#contribute","text":"For feature requests or bug reports, please use Github Issues","title":"Contribute"},{"location":"reference/mummify/","text":"Module mummify View Source from .main import log , history , switch Sub-modules mummify.cli mummify.main","title":"Index"},{"location":"reference/mummify/#module-mummify","text":"View Source from .main import log , history , switch","title":"Module mummify"},{"location":"reference/mummify/#sub-modules","text":"mummify.cli mummify.main","title":"Sub-modules"},{"location":"reference/mummify/cli/","text":"Module mummify.cli View Source import argparse from pathlib import Path import mummify def cli (): '''The command line interface for mummify Commands: - mummify history - mummify switch ''' parser = argparse . ArgumentParser () parser . add_argument ( 'function' , choices = ( 'history' , 'switch' )) parser . add_argument ( 'id' , nargs = '?' ) args = parser . parse_args () if args . function == 'history' : if not Path ( '.mummify' ) . is_dir (): print ( 'mummify not initialized' ) return print ( mummify . history ()) elif args . function == 'switch' and args . id is not None : if not Path ( '.mummify' ) . is_dir (): print ( 'mummify not initialized' ) return mummify . switch ( args . id ) else : print ( 'mummify id required' ) if __name__ == '__main__' : cli () Functions cli def cli ( ) The command line interface for mummify Commands: mummify history mummify switch View Source def cli () : ''' The command line interface for mummify Commands : - mummify history - mummify switch ''' parser = argparse . ArgumentParser () parser . add_argument ( ' function ' , choices = ( ' history ' , ' switch ' )) parser . add_argument ( ' id ' , nargs = ' ? ' ) args = parser . parse_args () if args . function == ' history ' : if not Path ( ' .mummify ' ) . is_dir () : print ( ' mummify not initialized ' ) return print ( mummify . history ()) elif args . function == ' switch ' and args . id is not None : if not Path ( ' .mummify ' ) . is_dir () : print ( ' mummify not initialized ' ) return mummify . switch ( args . id ) else : print ( ' mummify id required ' )","title":"CLI"},{"location":"reference/mummify/cli/#module-mummifycli","text":"View Source import argparse from pathlib import Path import mummify def cli (): '''The command line interface for mummify Commands: - mummify history - mummify switch ''' parser = argparse . ArgumentParser () parser . add_argument ( 'function' , choices = ( 'history' , 'switch' )) parser . add_argument ( 'id' , nargs = '?' ) args = parser . parse_args () if args . function == 'history' : if not Path ( '.mummify' ) . is_dir (): print ( 'mummify not initialized' ) return print ( mummify . history ()) elif args . function == 'switch' and args . id is not None : if not Path ( '.mummify' ) . is_dir (): print ( 'mummify not initialized' ) return mummify . switch ( args . id ) else : print ( 'mummify id required' ) if __name__ == '__main__' : cli ()","title":"Module mummify.cli"},{"location":"reference/mummify/cli/#functions","text":"","title":"Functions"},{"location":"reference/mummify/cli/#cli","text":"def cli ( ) The command line interface for mummify Commands: mummify history mummify switch View Source def cli () : ''' The command line interface for mummify Commands : - mummify history - mummify switch ''' parser = argparse . ArgumentParser () parser . add_argument ( ' function ' , choices = ( ' history ' , ' switch ' )) parser . add_argument ( ' id ' , nargs = ' ? ' ) args = parser . parse_args () if args . function == ' history ' : if not Path ( ' .mummify ' ) . is_dir () : print ( ' mummify not initialized ' ) return print ( mummify . history ()) elif args . function == ' switch ' and args . id is not None : if not Path ( ' .mummify ' ) . is_dir () : print ( ' mummify not initialized ' ) return mummify . switch ( args . id ) else : print ( ' mummify id required ' )","title":"cli"},{"location":"reference/mummify/main/","text":"Module mummify.main View Source import logging from pathlib import Path import re import subprocess import uuid LOGFILE = 'mummify.log' def run ( command , output = False , silent = False ): '''Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run('git --git-dir=.mummify status')` ''' if silent : command += ' --quiet' if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( 'utf-8' ) . strip () return output subprocess . run ( command , shell = True ) def colour ( string ): '''Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` ''' print ( f \" \\033 [35m{string} \\033 [0m\" ) def init_mummify (): '''Initialize mummify''' run ( 'git init --separate-git-dir .mummify' , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( 'git --git-dir=.mummify add .gitignore' ) run ( 'git --git-dir=.mummify commit -m \"mummify-root\"' , silent = True ) colour ( 'Initializing mummify' ) def history (): '''View modified git graph (CLI)''' graph = run ( 'git --git-dir=.mummify log --graph --decorate --oneline' , output = True ) graph = re . sub ( r '\\s([a-zA-Z0-9_-]){7}\\s' , ' ' , graph ) graph = re . sub ( r '\\(HEAD -> master\\)' , 'HEAD' , graph ) return f ' \\n {graph} \\n ' def check_status (): '''Check mummify git status''' git_status = run ( \"git --git-dir=.mummify status\" , output = True ) return git_status def create_branch ( BRANCH ): '''Create new mummify branch - BRANCH (str): branch UUID ''' run ( f 'git --git-dir=.mummify checkout -b {BRANCH}' , silent = True ) def commit ( BRANCH ): '''Commit run to .mummify - BRANCH (str): branch UUID ''' run ( 'git --git-dir=.mummify add .' ) run ( f 'git --git-dir=.mummify commit -m {BRANCH}' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( f 'git --git-dir=.mummify merge {BRANCH}' , silent = True ) run ( f 'git --git-dir=.mummify branch -d {BRANCH}' , silent = True ) def find ( id ): '''Find git commit based on mummify id - id (str): branch UUID Example: `find('mummify-2d234a8a')` ''' log_item = run ( f 'git --git-dir=.mummify log --all --grep={id}' , output = True ) commit = re . findall ( r '(?<=commit\\s)(.*?)(?=\\n)' , log_item )[ 0 ] return commit def switch ( id ): '''Switch to a specific mummify commit (CLI) - id (str): branch UUID Example: `max$ mummify switch mummify-2d234a8a` ''' commit = find ( id ) run ( 'git --git-dir=.mummify checkout -b logger' , silent = True ) run ( 'git --git-dir=.mummify checkout -b switcher' , silent = True ) run ( f 'git --git-dir=.mummify reset --hard {commit}' , silent = True ) run ( 'git --git-dir=.mummify merge -s ours --no-commit master' , silent = True ) run ( f 'git --git-dir=.mummify checkout logger {LOGFILE}' , silent = True ) run ( f 'git --git-dir=.mummify commit -m \"switch-{id}\"' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( 'git --git-dir=.mummify merge switcher' , silent = True ) run ( 'git --git-dir=.mummify branch -D logger' , silent = True ) run ( 'git --git-dir=.mummify branch -D switcher' , silent = True ) return colour ( f 'Sucessfully switched to {id}' ) def log ( message ): '''Log a message to mummify.log and save a snapshot - message (str): message to be logged Example: `log('Accuracy: 0.98')` ''' logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = '{' , format = '[{name}] {message}' ) BRANCH = f 'mummify-{str(uuid.uuid4().hex)[:8]}' logger = logging . getLogger ( BRANCH ) if not Path ( '.mummify' ) . is_dir (): init_mummify () if 'nothing to commit' in check_status (): colour ( 'Nothing changed, nothing logged' ) return None create_branch ( BRANCH ) logger . info ( message ) colour ( message ) commit ( BRANCH ) Variables LOGFILE Functions check_status def check_status ( ) Check mummify git status View Source def check_status () : ''' Check mummify git status ''' git_status = run ( \" git --git-dir=.mummify status \" , output = True ) return git_status colour def colour ( string ) Paint it purple! string (str): colour a string purple Example: purple('Hello World!') View Source def colour ( string ): '''Paint it purple! - string (str): colour a string purple Example: `purple(' Hello World ! ')` ''' print ( f \"\\033[35m{string}\\033[0m\" ) commit def commit ( BRANCH ) Commit run to .mummify BRANCH (str): branch UUID View Source def commit ( BRANCH ): '''Commit run to .mummify - BRANCH (str): branch UUID ''' run ( 'git --git-dir=.mummify add .' ) run ( f 'git --git-dir=.mummify commit -m {BRANCH}' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( f 'git --git-dir=.mummify merge {BRANCH}' , silent = True ) run ( f 'git --git-dir=.mummify branch -d {BRANCH}' , silent = True ) create_branch def create_branch ( BRANCH ) Create new mummify branch BRANCH (str): branch UUID View Source def create_branch ( BRANCH ): '''Create new mummify branch - BRANCH (str): branch UUID ''' run ( f 'git --git-dir=.mummify checkout -b {BRANCH}' , silent = True ) find def find ( id ) Find git commit based on mummify id id (str): branch UUID Example: find('mummify-2d234a8a') View Source def find ( id ) : ''' Find git commit based on mummify id - id ( str ) : branch UUID Example : ` find ( ' mummify-2d234a8a ' ) ` ''' log_item = run ( f ' git --git-dir=.mummify log --all --grep={id} ' , output = True ) commit = re . findall ( r ' (?<=commit\\s)(.*?)(?= \\n ) ' , log_item ) [ 0 ] return commit history def history ( ) View modified git graph (CLI) View Source def history () : ''' View modified git graph (CLI) ''' graph = run ( ' git --git-dir=.mummify log --graph --decorate --oneline ' , output = True ) graph = re . sub ( r ' \\s([a-zA-Z0-9_-]){7}\\s ' , ' ' , graph ) graph = re . sub ( r ' \\(HEAD -> master\\) ' , ' HEAD ' , graph ) return f ' \\n {graph} \\n ' init_mummify def init_mummify ( ) Initialize mummify View Source def init_mummify (): '''Initialize mummify''' run ( 'git init --separate-git-dir .mummify' , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( 'git --git-dir=.mummify add .gitignore' ) run ( 'git --git-dir=.mummify commit -m \"mummify-root\"' , silent = True ) colour ( 'Initializing mummify' ) log def log ( message ) Log a message to mummify.log and save a snapshot message (str): message to be logged Example: log('Accuracy: 0.98') View Source def log ( message ) : ''' Log a message to mummify.log and save a snapshot - message ( str ) : message to be logged Example : ` log ( ' Accuracy: 0.98 ' ) ` ''' logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = ' { ' , format = ' [{name}] {message} ' ) BRANCH = f ' mummify-{str(uuid.uuid4().hex)[:8]} ' logger = logging . getLogger ( BRANCH ) if not Path ( ' .mummify ' ) . is_dir () : init_mummify () if ' nothing to commit ' in check_status () : colour ( ' Nothing changed, nothing logged ' ) return None create_branch ( BRANCH ) logger . info ( message ) colour ( message ) commit ( BRANCH ) run def run ( command , output = False , silent = False ) Run shell commands command (str): a bash command output (bool, False): capture and return the STDOUT silent (bool, False): force commands to run silently Example: run('git --git-dir=.mummify status') View Source def run ( command , output = False , silent = False ) : ''' Run shell commands - command ( str ) : a bash command - output ( bool , False ) : capture and return the STDOUT - silent ( bool , False ) : force commands to run silently Example : ` run ( ' git --git-dir=.mummify status ' ) ` ''' if silent : command += ' --quiet ' if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( ' utf-8 ' ) . strip () return output subprocess . run ( command , shell = True ) switch def switch ( id ) Switch to a specific mummify commit (CLI) id (str): branch UUID Example: max$ mummify switch mummify-2d234a8a View Source def switch ( id ) : ''' Switch to a specific mummify commit (CLI) - id ( str ) : branch UUID Example : ` max $ mummify switch mummify - 2 d234a8a ` ''' commit = find ( id ) run ( ' git --git-dir=.mummify checkout -b logger ' , silent = True ) run ( ' git --git-dir=.mummify checkout -b switcher ' , silent = True ) run ( f ' git --git-dir=.mummify reset --hard {commit} ' , silent = True ) run ( ' git --git-dir=.mummify merge -s ours --no-commit master ' , silent = True ) run ( f ' git --git-dir=.mummify checkout logger {LOGFILE} ' , silent = True ) run ( f ' git --git-dir=.mummify commit -m \"switch-{id}\" ' , silent = True ) run ( ' git --git-dir=.mummify checkout master ' , silent = True ) run ( ' git --git-dir=.mummify merge switcher ' , silent = True ) run ( ' git --git-dir=.mummify branch -D logger ' , silent = True ) run ( ' git --git-dir=.mummify branch -D switcher ' , silent = True ) return colour ( f ' Sucessfully switched to {id} ' )","title":"Main"},{"location":"reference/mummify/main/#module-mummifymain","text":"View Source import logging from pathlib import Path import re import subprocess import uuid LOGFILE = 'mummify.log' def run ( command , output = False , silent = False ): '''Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run('git --git-dir=.mummify status')` ''' if silent : command += ' --quiet' if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( 'utf-8' ) . strip () return output subprocess . run ( command , shell = True ) def colour ( string ): '''Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` ''' print ( f \" \\033 [35m{string} \\033 [0m\" ) def init_mummify (): '''Initialize mummify''' run ( 'git init --separate-git-dir .mummify' , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( 'git --git-dir=.mummify add .gitignore' ) run ( 'git --git-dir=.mummify commit -m \"mummify-root\"' , silent = True ) colour ( 'Initializing mummify' ) def history (): '''View modified git graph (CLI)''' graph = run ( 'git --git-dir=.mummify log --graph --decorate --oneline' , output = True ) graph = re . sub ( r '\\s([a-zA-Z0-9_-]){7}\\s' , ' ' , graph ) graph = re . sub ( r '\\(HEAD -> master\\)' , 'HEAD' , graph ) return f ' \\n {graph} \\n ' def check_status (): '''Check mummify git status''' git_status = run ( \"git --git-dir=.mummify status\" , output = True ) return git_status def create_branch ( BRANCH ): '''Create new mummify branch - BRANCH (str): branch UUID ''' run ( f 'git --git-dir=.mummify checkout -b {BRANCH}' , silent = True ) def commit ( BRANCH ): '''Commit run to .mummify - BRANCH (str): branch UUID ''' run ( 'git --git-dir=.mummify add .' ) run ( f 'git --git-dir=.mummify commit -m {BRANCH}' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( f 'git --git-dir=.mummify merge {BRANCH}' , silent = True ) run ( f 'git --git-dir=.mummify branch -d {BRANCH}' , silent = True ) def find ( id ): '''Find git commit based on mummify id - id (str): branch UUID Example: `find('mummify-2d234a8a')` ''' log_item = run ( f 'git --git-dir=.mummify log --all --grep={id}' , output = True ) commit = re . findall ( r '(?<=commit\\s)(.*?)(?=\\n)' , log_item )[ 0 ] return commit def switch ( id ): '''Switch to a specific mummify commit (CLI) - id (str): branch UUID Example: `max$ mummify switch mummify-2d234a8a` ''' commit = find ( id ) run ( 'git --git-dir=.mummify checkout -b logger' , silent = True ) run ( 'git --git-dir=.mummify checkout -b switcher' , silent = True ) run ( f 'git --git-dir=.mummify reset --hard {commit}' , silent = True ) run ( 'git --git-dir=.mummify merge -s ours --no-commit master' , silent = True ) run ( f 'git --git-dir=.mummify checkout logger {LOGFILE}' , silent = True ) run ( f 'git --git-dir=.mummify commit -m \"switch-{id}\"' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( 'git --git-dir=.mummify merge switcher' , silent = True ) run ( 'git --git-dir=.mummify branch -D logger' , silent = True ) run ( 'git --git-dir=.mummify branch -D switcher' , silent = True ) return colour ( f 'Sucessfully switched to {id}' ) def log ( message ): '''Log a message to mummify.log and save a snapshot - message (str): message to be logged Example: `log('Accuracy: 0.98')` ''' logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = '{' , format = '[{name}] {message}' ) BRANCH = f 'mummify-{str(uuid.uuid4().hex)[:8]}' logger = logging . getLogger ( BRANCH ) if not Path ( '.mummify' ) . is_dir (): init_mummify () if 'nothing to commit' in check_status (): colour ( 'Nothing changed, nothing logged' ) return None create_branch ( BRANCH ) logger . info ( message ) colour ( message ) commit ( BRANCH )","title":"Module mummify.main"},{"location":"reference/mummify/main/#variables","text":"LOGFILE","title":"Variables"},{"location":"reference/mummify/main/#functions","text":"","title":"Functions"},{"location":"reference/mummify/main/#check_status","text":"def check_status ( ) Check mummify git status View Source def check_status () : ''' Check mummify git status ''' git_status = run ( \" git --git-dir=.mummify status \" , output = True ) return git_status","title":"check_status"},{"location":"reference/mummify/main/#colour","text":"def colour ( string ) Paint it purple! string (str): colour a string purple Example: purple('Hello World!') View Source def colour ( string ): '''Paint it purple! - string (str): colour a string purple Example: `purple(' Hello World ! ')` ''' print ( f \"\\033[35m{string}\\033[0m\" )","title":"colour"},{"location":"reference/mummify/main/#commit","text":"def commit ( BRANCH ) Commit run to .mummify BRANCH (str): branch UUID View Source def commit ( BRANCH ): '''Commit run to .mummify - BRANCH (str): branch UUID ''' run ( 'git --git-dir=.mummify add .' ) run ( f 'git --git-dir=.mummify commit -m {BRANCH}' , silent = True ) run ( 'git --git-dir=.mummify checkout master' , silent = True ) run ( f 'git --git-dir=.mummify merge {BRANCH}' , silent = True ) run ( f 'git --git-dir=.mummify branch -d {BRANCH}' , silent = True )","title":"commit"},{"location":"reference/mummify/main/#create_branch","text":"def create_branch ( BRANCH ) Create new mummify branch BRANCH (str): branch UUID View Source def create_branch ( BRANCH ): '''Create new mummify branch - BRANCH (str): branch UUID ''' run ( f 'git --git-dir=.mummify checkout -b {BRANCH}' , silent = True )","title":"create_branch"},{"location":"reference/mummify/main/#find","text":"def find ( id ) Find git commit based on mummify id id (str): branch UUID Example: find('mummify-2d234a8a') View Source def find ( id ) : ''' Find git commit based on mummify id - id ( str ) : branch UUID Example : ` find ( ' mummify-2d234a8a ' ) ` ''' log_item = run ( f ' git --git-dir=.mummify log --all --grep={id} ' , output = True ) commit = re . findall ( r ' (?<=commit\\s)(.*?)(?= \\n ) ' , log_item ) [ 0 ] return commit","title":"find"},{"location":"reference/mummify/main/#history","text":"def history ( ) View modified git graph (CLI) View Source def history () : ''' View modified git graph (CLI) ''' graph = run ( ' git --git-dir=.mummify log --graph --decorate --oneline ' , output = True ) graph = re . sub ( r ' \\s([a-zA-Z0-9_-]){7}\\s ' , ' ' , graph ) graph = re . sub ( r ' \\(HEAD -> master\\) ' , ' HEAD ' , graph ) return f ' \\n {graph} \\n '","title":"history"},{"location":"reference/mummify/main/#init_mummify","text":"def init_mummify ( ) Initialize mummify View Source def init_mummify (): '''Initialize mummify''' run ( 'git init --separate-git-dir .mummify' , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( 'git --git-dir=.mummify add .gitignore' ) run ( 'git --git-dir=.mummify commit -m \"mummify-root\"' , silent = True ) colour ( 'Initializing mummify' )","title":"init_mummify"},{"location":"reference/mummify/main/#log","text":"def log ( message ) Log a message to mummify.log and save a snapshot message (str): message to be logged Example: log('Accuracy: 0.98') View Source def log ( message ) : ''' Log a message to mummify.log and save a snapshot - message ( str ) : message to be logged Example : ` log ( ' Accuracy: 0.98 ' ) ` ''' logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = ' { ' , format = ' [{name}] {message} ' ) BRANCH = f ' mummify-{str(uuid.uuid4().hex)[:8]} ' logger = logging . getLogger ( BRANCH ) if not Path ( ' .mummify ' ) . is_dir () : init_mummify () if ' nothing to commit ' in check_status () : colour ( ' Nothing changed, nothing logged ' ) return None create_branch ( BRANCH ) logger . info ( message ) colour ( message ) commit ( BRANCH )","title":"log"},{"location":"reference/mummify/main/#run","text":"def run ( command , output = False , silent = False ) Run shell commands command (str): a bash command output (bool, False): capture and return the STDOUT silent (bool, False): force commands to run silently Example: run('git --git-dir=.mummify status') View Source def run ( command , output = False , silent = False ) : ''' Run shell commands - command ( str ) : a bash command - output ( bool , False ) : capture and return the STDOUT - silent ( bool , False ) : force commands to run silently Example : ` run ( ' git --git-dir=.mummify status ' ) ` ''' if silent : command += ' --quiet ' if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( ' utf-8 ' ) . strip () return output subprocess . run ( command , shell = True )","title":"run"},{"location":"reference/mummify/main/#switch","text":"def switch ( id ) Switch to a specific mummify commit (CLI) id (str): branch UUID Example: max$ mummify switch mummify-2d234a8a View Source def switch ( id ) : ''' Switch to a specific mummify commit (CLI) - id ( str ) : branch UUID Example : ` max $ mummify switch mummify - 2 d234a8a ` ''' commit = find ( id ) run ( ' git --git-dir=.mummify checkout -b logger ' , silent = True ) run ( ' git --git-dir=.mummify checkout -b switcher ' , silent = True ) run ( f ' git --git-dir=.mummify reset --hard {commit} ' , silent = True ) run ( ' git --git-dir=.mummify merge -s ours --no-commit master ' , silent = True ) run ( f ' git --git-dir=.mummify checkout logger {LOGFILE} ' , silent = True ) run ( f ' git --git-dir=.mummify commit -m \"switch-{id}\" ' , silent = True ) run ( ' git --git-dir=.mummify checkout master ' , silent = True ) run ( ' git --git-dir=.mummify merge switcher ' , silent = True ) run ( ' git --git-dir=.mummify branch -D logger ' , silent = True ) run ( ' git --git-dir=.mummify branch -D switcher ' , silent = True ) return colour ( f ' Sucessfully switched to {id} ' )","title":"switch"}]}