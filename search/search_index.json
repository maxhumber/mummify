{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About mummify is a version control tool for machine learning. It's simple, fast, and designed for model prototyping. Quickstart Usage Add mummify.log(<string>) to the bottom of a machine learning model: from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier import mummify data = load_wine () X , y = data . data , data . target model = KNeighborsClassifier ( n_neighbors = 4 ) model . fit ( X , y ) accuracy = round ( model . score ( X , y ), 4 ) mummify . log ( f 'Accuracy: { accuracy } ' ) Run the model at the command line: python model.py Edit the model to implement another algorithm: ... model = LogisticRegression () model . fit ( X , y ) accuracy = round ( model . score ( X , y ), 4 ) mummify . log ( f 'Accuracy: { accuracy } ' ) Inspect model history at the command line with: mummify history And peek at the logged messages at the command line with: cat mummify.log Switch to an earlier version of the model: mummify switch <id> mummify will persist snapshots and the mummify.log file between switches. Installation pip install mummify Contribute For feature requests or bug reports, please use Github Issues","title":"Home"},{"location":"#about","text":"mummify is a version control tool for machine learning. It's simple, fast, and designed for model prototyping.","title":"About"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#usage","text":"Add mummify.log(<string>) to the bottom of a machine learning model: from sklearn.datasets import load_wine from sklearn.neighbors import KNeighborsClassifier import mummify data = load_wine () X , y = data . data , data . target model = KNeighborsClassifier ( n_neighbors = 4 ) model . fit ( X , y ) accuracy = round ( model . score ( X , y ), 4 ) mummify . log ( f 'Accuracy: { accuracy } ' ) Run the model at the command line: python model.py Edit the model to implement another algorithm: ... model = LogisticRegression () model . fit ( X , y ) accuracy = round ( model . score ( X , y ), 4 ) mummify . log ( f 'Accuracy: { accuracy } ' ) Inspect model history at the command line with: mummify history And peek at the logged messages at the command line with: cat mummify.log Switch to an earlier version of the model: mummify switch <id> mummify will persist snapshots and the mummify.log file between switches.","title":"Usage"},{"location":"#installation","text":"pip install mummify","title":"Installation"},{"location":"#contribute","text":"For feature requests or bug reports, please use Github Issues","title":"Contribute"},{"location":"CHANGELOG/","text":"Install To install the latest version of mummify run: pip install -U mummify Changelog 1.3.0 (2020-08-19) mummify history improvements (top-to-bottom, just numbers)","title":"Changelog"},{"location":"CHANGELOG/#install","text":"To install the latest version of mummify run: pip install -U mummify","title":"Install"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#130-2020-08-19","text":"mummify history improvements (top-to-bottom, just numbers)","title":"1.3.0 (2020-08-19)"},{"location":"reference/mummify/","text":"Module mummify View Source from .main import log , history , switch Sub-modules mummify.cli mummify.main","title":"Index"},{"location":"reference/mummify/#module-mummify","text":"View Source from .main import log , history , switch","title":"Module mummify"},{"location":"reference/mummify/#sub-modules","text":"mummify.cli mummify.main","title":"Sub-modules"},{"location":"reference/mummify/cli/","text":"Module mummify.cli View Source import argparse from pathlib import Path import subprocess import mummify from .main import colour def cli (): \"\"\"The command line interface for mummify Commands: - mummify history - mummify switch \"\"\" parser = argparse . ArgumentParser () parser . add_argument ( \"function\" , choices = ( \"history\" , \"switch\" )) parser . add_argument ( \"id\" , nargs = \"?\" ) args = parser . parse_args () if not Path ( \".mummify\" ) . is_dir (): return \"mummify not enabled\" if args . function == \"history\" : return mummify . history () if args . function == \"switch\" and args . id is not None : mummify . switch ( args . id ) else : return colour ( 'mummify id required' ) if __name__ == \"__main__\" : cli () Functions cli def cli ( ) The command line interface for mummify Commands: mummify history mummify switch View Source def cli (): \"\"\"The command line interface for mummify Commands: - mummify history - mummify switch \"\"\" parser = argparse . ArgumentParser () parser . add_argument ( \"function\" , choices = ( \"history\" , \"switch\" )) parser . add_argument ( \"id\" , nargs = \"?\" ) args = parser . parse_args () if not Path ( \".mummify\" ). is_dir (): return \"mummify not enabled\" if args . function == \"history\" : return mummify . history () if args . function == \"switch\" and args . id is not None : mummify . switch ( args . id ) else : return colour ( 'mummify id required' )","title":"CLI"},{"location":"reference/mummify/cli/#module-mummifycli","text":"View Source import argparse from pathlib import Path import subprocess import mummify from .main import colour def cli (): \"\"\"The command line interface for mummify Commands: - mummify history - mummify switch \"\"\" parser = argparse . ArgumentParser () parser . add_argument ( \"function\" , choices = ( \"history\" , \"switch\" )) parser . add_argument ( \"id\" , nargs = \"?\" ) args = parser . parse_args () if not Path ( \".mummify\" ) . is_dir (): return \"mummify not enabled\" if args . function == \"history\" : return mummify . history () if args . function == \"switch\" and args . id is not None : mummify . switch ( args . id ) else : return colour ( 'mummify id required' ) if __name__ == \"__main__\" : cli ()","title":"Module mummify.cli"},{"location":"reference/mummify/cli/#functions","text":"","title":"Functions"},{"location":"reference/mummify/cli/#cli","text":"def cli ( ) The command line interface for mummify Commands: mummify history mummify switch View Source def cli (): \"\"\"The command line interface for mummify Commands: - mummify history - mummify switch \"\"\" parser = argparse . ArgumentParser () parser . add_argument ( \"function\" , choices = ( \"history\" , \"switch\" )) parser . add_argument ( \"id\" , nargs = \"?\" ) args = parser . parse_args () if not Path ( \".mummify\" ). is_dir (): return \"mummify not enabled\" if args . function == \"history\" : return mummify . history () if args . function == \"switch\" and args . id is not None : mummify . switch ( args . id ) else : return colour ( 'mummify id required' )","title":"cli"},{"location":"reference/mummify/main/","text":"Module mummify.main View Source import logging from pathlib import Path import re import subprocess import uuid LOGFILE = \"mummify.log\" def run ( command , output = False , silent = False ) : \"\"\"Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run(\" git --git - dir=.mummify status \")` \"\"\" if silent : command += \" --quiet\" if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( \"utf-8\" ). strip () return output subprocess . run ( command , shell = True ) def colour ( string ) : \"\"\"Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` \"\"\" print ( f \" \\ 033 [ 35 m { string } \\ 033 [ 0 m \") def init_mummify(): \"\"\" Initialize mummify \"\"\" run(\" git --work - tree=. --git - dir=.mummify init \", silent=True) run(\" echo '.mummify' >> . gitignore \") run(\" echo '__pycache__' >> . gitignore \") run(\" git --work - tree=. --git - dir=.mummify add . gitignore \") run('git --work-tree=. --git-dir=.mummify commit -m \" 000000 \"', silent=True) colour(\" mummify initializing ... \") def history(): \"\"\" View modified git graph ( CLI ) \"\"\" graph = run( \" git --work - tree=. --git - dir=.mummify log --graph --decorate --oneline \", output=True, ) graph = re.sub(r\" \\ s ([ a - zA - Z0 - 9 _ - ]){ 7 } \\s \", \" \", graph) graph = graph.replace(\" ( HEAD -> master ) \", \" \u25c0 \") graph = graph.replace(\" * 000000 \", \"\").strip() lines = graph.split('\\n')[::-1] graph = '' for line in lines: for character in line: if character == \" / \": character = \" \\\\ \" elif character == \" \\\\ \": character = \" / \" graph += character graph += '\\n' graph = graph.strip() return colour(graph) def check_status(): \"\"\" Check mummify git status \"\"\" git_status = run(\" git --work - tree=. --git - dir=.mummify status \", output=True) return git_status def create_branch(branch): \"\"\" Create new mummify branch - branch ( str ) : branch UUID \"\"\" run(f\" git --work - tree=. --git - dir=.mummify checkout - b { branch } \", silent=True) def commit(branch): \"\"\" Commit run to . mummify - branch ( str ) : branch UUID \"\"\" run(\" git --work - tree=. --git - dir=.mummify add . \") run(f\" git --work - tree=. --git - dir=.mummify commit - m { branch } \", silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout master \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify merge { branch } \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify branch - d { branch } \", silent=True) def find(id): \"\"\" Find git commit based on mummify id - id ( str ) : branch UUID Example : ` find ( \"2d234a\" ) ` \"\"\" log_item = run( f\" git --work - tree=. --git - dir=.mummify log --all --grep= { id } \", output=True ) commit = re.findall(r\" ( ?<=commit\\s )(. *? )( ?=\\n ) \", log_item)[0] return commit def switch(id): \"\"\" Switch to a specific mummify commit ( CLI ) - id ( str ) : branch UUID Example : ` switch ( \"2d234a\" ) ` \"\"\" assert len(id) == 6 commit = find(id) run(\" git --work - tree=. --git - dir=.mummify checkout - b logger \", silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout - b switcher \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify reset --hard { commit } \", silent=True) run(\" git --work - tree=. --git - dir=.mummify merge - s ours --no - commit master >/dev / null 2 >& 1 \") run(f\" git --work - tree=. --git - dir=.mummify checkout logger { LOGFILE } >/dev / null 2 >& 1 \") run(f'git --work-tree=. --git-dir=.mummify commit -m \" { id } \"', silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout master \", silent=True) run(\" git --work - tree=. --git - dir=.mummify merge switcher >/dev / null 2 >& 1 \") run(\" git --work - tree=. --git - dir=.mummify branch - D logger \", silent=True) run(\" git --work - tree=. --git - dir=.mummify branch - D switcher \", silent=True) return colour(f\" mummify switched to { id } \") def log(message): \"\"\" Save a snapshot and log a message to mummify . log - message ( str ) : message to log Example : ` log ( 'Accuracy: 0.98' ) ` \"\"\" logging.basicConfig( filename=LOGFILE, level=logging.INFO, style=\" { \", format=\" [{ name }] { message } \" ) branch = str(uuid.uuid4().hex)[:6] logger = logging.getLogger(branch) if not Path(\" . mummify \").is_dir(): init_mummify() if \" nothing to commit \" in check_status(): return colour(\" mummify can ' t see any changes \" ) create_branch ( branch ) logger . info ( message ) colour ( message ) commit ( branch ) Variables LOGFILE Functions check_status def check_status ( ) Check mummify git status View Source def check_status (): \"\"\"Check mummify git status\"\"\" git_status = run ( \"git --work-tree=. --git-dir=.mummify status\" , output = True ) return git_status colour def colour ( string ) Paint it purple! string (str): colour a string purple Example: purple('Hello World!') View Source def colour ( string ): \"\"\"Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` \"\"\" print ( f \"\\033[35m{string}\\033[0m\" ) commit def commit ( branch ) Commit run to .mummify branch (str): branch UUID View Source def commit ( branch ): \"\"\"Commit run to .mummify - branch (str): branch UUID \"\"\" run ( \"git --work-tree=. --git-dir=.mummify add .\" ) run ( f \"git --work-tree=. --git-dir=.mummify commit -m {branch}\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout master\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify merge {branch}\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify branch -d {branch}\" , silent = True ) create_branch def create_branch ( branch ) Create new mummify branch branch (str): branch UUID View Source def create_branch ( branch ): \"\"\"Create new mummify branch - branch (str): branch UUID \"\"\" run ( f \"git --work-tree=. --git-dir=.mummify checkout -b {branch}\" , silent = True ) find def find ( id ) Find git commit based on mummify id id (str): branch UUID Example: find(\"2d234a\") View Source def find ( id ): \"\"\"Find git commit based on mummify id - id (str): branch UUID Example: `find(\" 2 d234a \")` \"\"\" log_item = run ( f \"git --work-tree=. --git-dir=.mummify log --all --grep={id}\" , output = True ) commit = re . findall ( r \"(?<=commit\\s)(.*?)(?=\\n)\" , log_item )[ 0 ] return commit history def history ( ) View modified git graph (CLI) View Source def history () : \"\"\"View modified git graph (CLI)\"\"\" graph = run ( \"git --work-tree=. --git-dir=.mummify log --graph --decorate --oneline\" , output = True , ) graph = re . sub ( r \"\\s([a-zA-Z0-9_-]){7}\\s\" , \" \" , graph ) graph = graph . replace ( \" (HEAD -> master)\" , \"\u25c0\" ) graph = graph . replace ( \"* 000000\" , \"\" ). strip () lines = graph . split ( '\\n' )[ ::- 1 ] graph = '' for line in lines : for character in line : if character == \"/\" : character = \" \\\\ \" elif character == \" \\\\ \": character = \" / \" graph += character graph += '\\n' graph = graph . strip () return colour ( graph ) init_mummify def init_mummify ( ) Initialize mummify View Source def init_mummify (): \"\"\"Initialize mummify\"\"\" run ( \"git --work-tree=. --git-dir=.mummify init\" , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( \"git --work-tree=. --git-dir=.mummify add .gitignore\" ) run ( 'git --work-tree=. --git-dir=.mummify commit -m \"000000\"' , silent = True ) colour ( \"mummify initializing...\" ) log def log ( message ) Save a snapshot and log a message to mummify.log message (str): message to log Example: log('Accuracy: 0.98') View Source def log ( message ): \"\"\"Save a snapshot and log a message to mummify.log - message (str): message to log Example: `log('Accuracy: 0.98')` \"\"\" logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = \"{\" , format = \"[{name}] {message}\" ) branch = str ( uuid . uuid4 (). hex )[: 6 ] logger = logging . getLogger ( branch ) if not Path ( \".mummify\" ). is_dir (): init_mummify () if \"nothing to commit\" in check_status (): return colour ( \"mummify can't see any changes\" ) create_branch ( branch ) logger . info ( message ) colour ( message ) commit ( branch ) run def run ( command , output = False , silent = False ) Run shell commands command (str): a bash command output (bool, False): capture and return the STDOUT silent (bool, False): force commands to run silently Example: run(\"git --git-dir=.mummify status\") View Source def run ( command , output = False , silent = False ): \"\"\"Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run(\" git --git-dir=.mummify status\")` \"\"\" if silent: command += \" --quiet\" if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( \"utf-8\" ). strip () return output subprocess . run ( command , shell = True ) switch def switch ( id ) Switch to a specific mummify commit (CLI) id (str): branch UUID Example: switch(\"2d234a\") View Source def switch ( id ): \"\"\"Switch to a specific mummify commit (CLI) - id (str): branch UUID Example: `switch(\" 2 d234a \")` \"\"\" assert len ( id ) == 6 commit = find ( id ) run ( \"git --work-tree=. --git-dir=.mummify checkout -b logger\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout -b switcher\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify reset --hard {commit}\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify merge -s ours --no-commit master >/dev/null 2>&1\" ) run ( f \"git --work-tree=. --git-dir=.mummify checkout logger {LOGFILE} >/dev/null 2>&1\" ) run ( f 'git --work-tree=. --git-dir=.mummify commit -m \"{id}\"' , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout master\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify merge switcher >/dev/null 2>&1\" ) run ( \"git --work-tree=. --git-dir=.mummify branch -D logger\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify branch -D switcher\" , silent = True ) return colour ( f \"mummify switched to {id}\" )","title":"Main"},{"location":"reference/mummify/main/#module-mummifymain","text":"View Source import logging from pathlib import Path import re import subprocess import uuid LOGFILE = \"mummify.log\" def run ( command , output = False , silent = False ) : \"\"\"Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run(\" git --git - dir=.mummify status \")` \"\"\" if silent : command += \" --quiet\" if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( \"utf-8\" ). strip () return output subprocess . run ( command , shell = True ) def colour ( string ) : \"\"\"Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` \"\"\" print ( f \" \\ 033 [ 35 m { string } \\ 033 [ 0 m \") def init_mummify(): \"\"\" Initialize mummify \"\"\" run(\" git --work - tree=. --git - dir=.mummify init \", silent=True) run(\" echo '.mummify' >> . gitignore \") run(\" echo '__pycache__' >> . gitignore \") run(\" git --work - tree=. --git - dir=.mummify add . gitignore \") run('git --work-tree=. --git-dir=.mummify commit -m \" 000000 \"', silent=True) colour(\" mummify initializing ... \") def history(): \"\"\" View modified git graph ( CLI ) \"\"\" graph = run( \" git --work - tree=. --git - dir=.mummify log --graph --decorate --oneline \", output=True, ) graph = re.sub(r\" \\ s ([ a - zA - Z0 - 9 _ - ]){ 7 } \\s \", \" \", graph) graph = graph.replace(\" ( HEAD -> master ) \", \" \u25c0 \") graph = graph.replace(\" * 000000 \", \"\").strip() lines = graph.split('\\n')[::-1] graph = '' for line in lines: for character in line: if character == \" / \": character = \" \\\\ \" elif character == \" \\\\ \": character = \" / \" graph += character graph += '\\n' graph = graph.strip() return colour(graph) def check_status(): \"\"\" Check mummify git status \"\"\" git_status = run(\" git --work - tree=. --git - dir=.mummify status \", output=True) return git_status def create_branch(branch): \"\"\" Create new mummify branch - branch ( str ) : branch UUID \"\"\" run(f\" git --work - tree=. --git - dir=.mummify checkout - b { branch } \", silent=True) def commit(branch): \"\"\" Commit run to . mummify - branch ( str ) : branch UUID \"\"\" run(\" git --work - tree=. --git - dir=.mummify add . \") run(f\" git --work - tree=. --git - dir=.mummify commit - m { branch } \", silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout master \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify merge { branch } \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify branch - d { branch } \", silent=True) def find(id): \"\"\" Find git commit based on mummify id - id ( str ) : branch UUID Example : ` find ( \"2d234a\" ) ` \"\"\" log_item = run( f\" git --work - tree=. --git - dir=.mummify log --all --grep= { id } \", output=True ) commit = re.findall(r\" ( ?<=commit\\s )(. *? )( ?=\\n ) \", log_item)[0] return commit def switch(id): \"\"\" Switch to a specific mummify commit ( CLI ) - id ( str ) : branch UUID Example : ` switch ( \"2d234a\" ) ` \"\"\" assert len(id) == 6 commit = find(id) run(\" git --work - tree=. --git - dir=.mummify checkout - b logger \", silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout - b switcher \", silent=True) run(f\" git --work - tree=. --git - dir=.mummify reset --hard { commit } \", silent=True) run(\" git --work - tree=. --git - dir=.mummify merge - s ours --no - commit master >/dev / null 2 >& 1 \") run(f\" git --work - tree=. --git - dir=.mummify checkout logger { LOGFILE } >/dev / null 2 >& 1 \") run(f'git --work-tree=. --git-dir=.mummify commit -m \" { id } \"', silent=True) run(\" git --work - tree=. --git - dir=.mummify checkout master \", silent=True) run(\" git --work - tree=. --git - dir=.mummify merge switcher >/dev / null 2 >& 1 \") run(\" git --work - tree=. --git - dir=.mummify branch - D logger \", silent=True) run(\" git --work - tree=. --git - dir=.mummify branch - D switcher \", silent=True) return colour(f\" mummify switched to { id } \") def log(message): \"\"\" Save a snapshot and log a message to mummify . log - message ( str ) : message to log Example : ` log ( 'Accuracy: 0.98' ) ` \"\"\" logging.basicConfig( filename=LOGFILE, level=logging.INFO, style=\" { \", format=\" [{ name }] { message } \" ) branch = str(uuid.uuid4().hex)[:6] logger = logging.getLogger(branch) if not Path(\" . mummify \").is_dir(): init_mummify() if \" nothing to commit \" in check_status(): return colour(\" mummify can ' t see any changes \" ) create_branch ( branch ) logger . info ( message ) colour ( message ) commit ( branch )","title":"Module mummify.main"},{"location":"reference/mummify/main/#variables","text":"LOGFILE","title":"Variables"},{"location":"reference/mummify/main/#functions","text":"","title":"Functions"},{"location":"reference/mummify/main/#check_status","text":"def check_status ( ) Check mummify git status View Source def check_status (): \"\"\"Check mummify git status\"\"\" git_status = run ( \"git --work-tree=. --git-dir=.mummify status\" , output = True ) return git_status","title":"check_status"},{"location":"reference/mummify/main/#colour","text":"def colour ( string ) Paint it purple! string (str): colour a string purple Example: purple('Hello World!') View Source def colour ( string ): \"\"\"Paint it purple! - string (str): colour a string purple Example: `purple('Hello World!')` \"\"\" print ( f \"\\033[35m{string}\\033[0m\" )","title":"colour"},{"location":"reference/mummify/main/#commit","text":"def commit ( branch ) Commit run to .mummify branch (str): branch UUID View Source def commit ( branch ): \"\"\"Commit run to .mummify - branch (str): branch UUID \"\"\" run ( \"git --work-tree=. --git-dir=.mummify add .\" ) run ( f \"git --work-tree=. --git-dir=.mummify commit -m {branch}\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout master\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify merge {branch}\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify branch -d {branch}\" , silent = True )","title":"commit"},{"location":"reference/mummify/main/#create_branch","text":"def create_branch ( branch ) Create new mummify branch branch (str): branch UUID View Source def create_branch ( branch ): \"\"\"Create new mummify branch - branch (str): branch UUID \"\"\" run ( f \"git --work-tree=. --git-dir=.mummify checkout -b {branch}\" , silent = True )","title":"create_branch"},{"location":"reference/mummify/main/#find","text":"def find ( id ) Find git commit based on mummify id id (str): branch UUID Example: find(\"2d234a\") View Source def find ( id ): \"\"\"Find git commit based on mummify id - id (str): branch UUID Example: `find(\" 2 d234a \")` \"\"\" log_item = run ( f \"git --work-tree=. --git-dir=.mummify log --all --grep={id}\" , output = True ) commit = re . findall ( r \"(?<=commit\\s)(.*?)(?=\\n)\" , log_item )[ 0 ] return commit","title":"find"},{"location":"reference/mummify/main/#history","text":"def history ( ) View modified git graph (CLI) View Source def history () : \"\"\"View modified git graph (CLI)\"\"\" graph = run ( \"git --work-tree=. --git-dir=.mummify log --graph --decorate --oneline\" , output = True , ) graph = re . sub ( r \"\\s([a-zA-Z0-9_-]){7}\\s\" , \" \" , graph ) graph = graph . replace ( \" (HEAD -> master)\" , \"\u25c0\" ) graph = graph . replace ( \"* 000000\" , \"\" ). strip () lines = graph . split ( '\\n' )[ ::- 1 ] graph = '' for line in lines : for character in line : if character == \"/\" : character = \" \\\\ \" elif character == \" \\\\ \": character = \" / \" graph += character graph += '\\n' graph = graph . strip () return colour ( graph )","title":"history"},{"location":"reference/mummify/main/#init_mummify","text":"def init_mummify ( ) Initialize mummify View Source def init_mummify (): \"\"\"Initialize mummify\"\"\" run ( \"git --work-tree=. --git-dir=.mummify init\" , silent = True ) run ( \"echo '.mummify' >> .gitignore\" ) run ( \"echo '__pycache__' >> .gitignore\" ) run ( \"git --work-tree=. --git-dir=.mummify add .gitignore\" ) run ( 'git --work-tree=. --git-dir=.mummify commit -m \"000000\"' , silent = True ) colour ( \"mummify initializing...\" )","title":"init_mummify"},{"location":"reference/mummify/main/#log","text":"def log ( message ) Save a snapshot and log a message to mummify.log message (str): message to log Example: log('Accuracy: 0.98') View Source def log ( message ): \"\"\"Save a snapshot and log a message to mummify.log - message (str): message to log Example: `log('Accuracy: 0.98')` \"\"\" logging . basicConfig ( filename = LOGFILE , level = logging . INFO , style = \"{\" , format = \"[{name}] {message}\" ) branch = str ( uuid . uuid4 (). hex )[: 6 ] logger = logging . getLogger ( branch ) if not Path ( \".mummify\" ). is_dir (): init_mummify () if \"nothing to commit\" in check_status (): return colour ( \"mummify can't see any changes\" ) create_branch ( branch ) logger . info ( message ) colour ( message ) commit ( branch )","title":"log"},{"location":"reference/mummify/main/#run","text":"def run ( command , output = False , silent = False ) Run shell commands command (str): a bash command output (bool, False): capture and return the STDOUT silent (bool, False): force commands to run silently Example: run(\"git --git-dir=.mummify status\") View Source def run ( command , output = False , silent = False ): \"\"\"Run shell commands - command (str): a bash command - output (bool, False): capture and return the STDOUT - silent (bool, False): force commands to run silently Example: `run(\" git --git-dir=.mummify status\")` \"\"\" if silent: command += \" --quiet\" if output : s = subprocess . run ( command , capture_output = True , shell = True ) output = s . stdout . decode ( \"utf-8\" ). strip () return output subprocess . run ( command , shell = True )","title":"run"},{"location":"reference/mummify/main/#switch","text":"def switch ( id ) Switch to a specific mummify commit (CLI) id (str): branch UUID Example: switch(\"2d234a\") View Source def switch ( id ): \"\"\"Switch to a specific mummify commit (CLI) - id (str): branch UUID Example: `switch(\" 2 d234a \")` \"\"\" assert len ( id ) == 6 commit = find ( id ) run ( \"git --work-tree=. --git-dir=.mummify checkout -b logger\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout -b switcher\" , silent = True ) run ( f \"git --work-tree=. --git-dir=.mummify reset --hard {commit}\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify merge -s ours --no-commit master >/dev/null 2>&1\" ) run ( f \"git --work-tree=. --git-dir=.mummify checkout logger {LOGFILE} >/dev/null 2>&1\" ) run ( f 'git --work-tree=. --git-dir=.mummify commit -m \"{id}\"' , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify checkout master\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify merge switcher >/dev/null 2>&1\" ) run ( \"git --work-tree=. --git-dir=.mummify branch -D logger\" , silent = True ) run ( \"git --work-tree=. --git-dir=.mummify branch -D switcher\" , silent = True ) return colour ( f \"mummify switched to {id}\" )","title":"switch"}]}